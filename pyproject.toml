[tool.poetry]
name = "tiqa"
version = "0.1.0"
description = "PyTorch Image Quality Assessment library"
authors = ["Riccardo Musmeci <riccardomusmeci92@gmail.com>"]
readme = "README.md"
packages = [
    { include = "tiqa", from = "src" },
]

[project.metadata]
domains = ["cv"]
keywords = [
  "Image Quality Assessment",
  "Computer Vision",
]

[tool.poetry.dependencies]
python="^3.9"
pandas = "*"
matplotlib = "*"
tqdm = "*"
timm = "*"
glob2 = "*"
torch = "2.1.0"
torchvision = "0.16.0"
pytorch-lightning = "2.1.0"
opencv-python = "^4.8.1.78"
albumentations = "1.3.0"
transformers = "^4.10.0"

# dev dependencies
black = { version = "23.3.0", optional = true, extras = ["jupyter"] }
ruff = { version = "0.0.264", optional = true }
mypy = { version = "1.2.0", optional = true }
pre-commit = { version = "3.3.1", optional = true }
docformatter = { version = "1.5.1", optional = true }
docstr-coverage = { version = "2.2.0", optional = true }
twine = { version = ">=4.0.0,<5", optional = true }

# test dependencies
pytest = { version = "7.3.1", optional = true }
pytest-cov = { version = "4.0.0", optional = true }
# beautify pytest output
pytest-sugar = { version = "0.9.7", optional = true }
# parallel test execution
pytest-xdist = { version = "3.2.1", optional = true }

# doc dependencies
Sphinx = { version = ">=6.0.0,<7", optional = true }
m2r2 = { version = "0.3.3.post2", optional = true }
sphinx-autodoc-typehints = { version = "1.23.0", optional = true }
sphinx-rtd-theme = { version = "0.5.1", optional = true }
numpydoc = { version = "1.5.0", optional = true }
tensorboard = "^2.14.1"
tensorboardx = "^2.6.2.2"
types-pyyaml = "^6.0.12.12"
torchmetrics = "1.2.0"


[tool.poetry.extras]
dev = [
  "black",
  "ruff",
  "mypy",
  "pre-commit",
  "docformatter",
  "docstr-coverage",
  "twine",
]
test = ["pytest", "pytest-cov", "pytest-sugar", "pytest-xdist"]
docs = [
  "Sphinx",
  "m2r2",
  "sphinx-autodoc-typehints",
  "sphinx-rtd-theme",
  "numpydoc",
]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
src = ["src"]
line-length = 120
# Enable auto fix
fix = true
# Enable Pyflakes `E` and `F` codes by default.
select = ["B", "C", "E", "F", "W", "I001", "I002", "D101", "D102"]
ignore = ["E501", "D103", "F401", "C901", "B905", "E741"]

# Exclude a variety of commonly ignored directories.
exclude = [
  ".bzr",
  ".direnv",
  ".eggs",
  ".git",
  ".hg",
  ".mypy_cache",
  ".nox",
  ".pants.d",
  ".ruff_cache",
  ".svn",
  ".tox",
  ".venv",
  "__pypackages__",
  "_build",
  "buck-out",
  "build",
  "dist",
  "node_modules",
  "venv",
  "__pycache__",
  "docs/source/conf.py",
  "bin",
  "lib",
  ".cicd",
  # "src/tiqa/.resources",
  "train.py"
]
#per-file-ignores = {}

# Allow unused variables when underscore-prefixed.
#dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Assume Python 3.10.
target-version = "py310"

[tool.ruff.isort]
known-first-party = ["src"]

[tool.ruff.mccabe]
max-complexity = 18

[tool.coverage.run]
branch = true
dynamic_context = "test_function"
source = ["src/tiqa"]
# omit = ["src/tiqa/__init__.py", "src/tiqa/visualization/*.py"]

[tool.coverage.report]
exclude_lines = [
  # Have to re-enable the standard pragma
  "pragma: no cover",
  # Don't complain about missing debug-only code:
  "def __repr__",
  "if self\\.debug",
  # Don't complain if tests don't hit defensive assertion code:
  "raise AssertionError",
  "raise NotImplementedError",
  # Don't complain if non-runnable code isn't run:
  "if 0:",
  "if __name__ == .__main__.:",
]

[tool.coverage.html]
directory = "htmlcov"
show_contexts = true

[tool.black]
line-length = 120
include = '\.pyi?$|\.ipynb$'
exclude = '''
/(
    \.eggs         # exclude a few common directories in the
  | \.git          # root of the project
  | \.hg
  | \.mypy_cache
  | \.nox
  | \.tox
  | \.venv
  | venv
  | \.svn
  | \.ipynb_checkpoints
  | _build
  | buck-out
  | build
  | dist
  | __pypackages__
  | \.env
  | env
  | \.vscode
  | \.ruff_cache
  | docs
  | bin
  | lib
  | \.cicd
  | src/tiqa/\.resources
)/
'''

[tool.pytest.ini_options]
testpaths = ["tests"]
log_file = "tests/logs/pytest-logs.log"
log_file_level = "DEBUG"
log_file_format = "%(asctime)s | %(levelname)-8s | %(module)-20s | %(funcName)-20s | %(thread)-8d ; %(message)s"
log_file_date_format = "%Y-%m-%d %H:%M:%S"

[tool.mypy]
python_version = "3.10"
files = ["./src/**/*.py", "./tests/**/*.py"]
exclude = [
  'venv',
  '.venv',
  'env',
  '.env',
  'docs',
  'bin',
  'lib',
  '.cicd',
  "tests",
  "src/tiqa/model/factory/daclip_vit"
]
# enables PEP 420 style namespace packages.
namespace_packages = true
# follows all imports normally and type checks all top level code
# (as well as the bodies of all functions and methods with at least one type annotation in the signature).
follow_imports = "normal"
# raises an error whene imports cannot be resolved
ignore_missing_imports = true
# raises an error for functions without type annotations or with incomplete type annotations.
disallow_untyped_defs = true
# nicer output in error messages
pretty = true
# warns useless # type: ignore commands
warn_unused_ignores = true
# shows errors for missing return statements on some execution paths.
warn_no_return = true
# shows a warning when encountering any code inferred to be unreachable or redundant after performing type analysis.
warn_unreachable = true
# prefixes each error with the relevant context.
show_error_context = true
# shows column numbers in error messages.
show_column_numbers = true
# hides error codes in error messages
hide_error_codes = false
# causes mypy to treat arguments with a None default value as having an implicit Optional type.
implicit_optional = false


[tool.docformatter]
recursive = true
